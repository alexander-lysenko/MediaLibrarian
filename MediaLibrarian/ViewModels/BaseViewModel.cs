using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows.Controls;

namespace MediaLibrarian.ViewModels
{
    // https://stackoverflow.com/questions/56606441
    internal class BaseViewModel : INotifyPropertyChanged, INotifyDataErrorInfo
    {
        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);

            return true;
        }

        #endregion

        #region INotifyDataErrorInfo

        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;

        protected Dictionary<string, List<string>> Errors { get; } =
            new Dictionary<string, List<string>>();

        protected Dictionary<string, IList<ValidationRule>> ValidationRules { get; } =
            new Dictionary<string, IList<ValidationRule>>();

        public bool HasErrors => Errors.Any();

        public IEnumerable GetErrors(string propertyName)
        {
            Debug.WriteLine($"propertyName: {propertyName}");
            if (string.IsNullOrWhiteSpace(propertyName))
            {
                return Errors.SelectMany(entry => entry.Value);
            }

            return Errors.TryGetValue(propertyName, out var errors) ? errors : null;
        }

        private void OnErrorsChanged(string propertyName)
        {
            ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));
        }

        #endregion

        #region Custom Validation

        // Validation method. 
        // Is called from each property which needs to validate its value.
        // Because the parameter 'propertyName' is decorated with the 'CallerMemberName' attribute.
        // this parameter is automatically generated by the compiler. 
        // The caller only needs to pass in the 'propertyValue', if the caller is the target property's set method.
        public bool ValidateProperty<TValue>(TValue propertyValue, [CallerMemberName] string propertyName = null)
        {
            // Clear previous errors of the current property to be validated 
            ClearErrors(propertyName);

            if (!ValidationRules.TryGetValue(propertyName ?? "", out var propertyValidationRules)) return true;
            // Apply all the rules that are associated with the current property 
            // and validate the property's value            
            var errorMessages = propertyValidationRules
                .Select(validationRule => validationRule.Validate(propertyValue, CultureInfo.CurrentCulture))
                .Where(result => !result.IsValid)
                .Select(invalidResult => invalidResult.ErrorContent.ToString())
                .ToList();

            AddErrorRange(propertyName, errorMessages);

            return !errorMessages.Any();
        }

        // Adds the specified errors to the errors collection if it is not 
        // already present, inserting it in the first position if 'isWarning' is 
        // false. Raises the ErrorsChanged event if the Errors collection changes. 
        // A property can have multiple errors.
        private void AddErrorRange(string propertyName, List<string> newErrors)
        {
            if (!newErrors.Any()) return;

            if (!Errors.TryGetValue(propertyName, out var propertyErrors))
            {
                propertyErrors = new List<string>();
                Errors.Add(propertyName, propertyErrors);
            }

            foreach (var error in newErrors)
            {
                //propertyErrors.Add(error);
                propertyErrors.Insert(0, error);
            }

            OnErrorsChanged(propertyName);
        }

        protected void AddError(string propertyName, string error)
        {
            if (!Errors.ContainsKey(propertyName)) Errors[propertyName] = new List<string>();
            if (Errors[propertyName].Contains(error)) return;

            Errors[propertyName].Add(error);

            OnErrorsChanged(propertyName);
        }

        protected void ClearErrors(string propertyName)
        {
            if (!Errors.Remove(propertyName)) return;

            OnErrorsChanged(propertyName);
        }

        #endregion
    }
}